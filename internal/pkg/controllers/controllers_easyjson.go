// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package controllers

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson650569b1DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers(in *jlexer.Lexer, out *responseUserGuidStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "user_guid":
			out.UserGuid = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson650569b1EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers(out *jwriter.Writer, in responseUserGuidStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"user_guid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UserGuid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v responseUserGuidStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson650569b1EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v responseUserGuidStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson650569b1EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *responseUserGuidStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson650569b1DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *responseUserGuidStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson650569b1DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers(l, v)
}
func easyjson650569b1DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers1(in *jlexer.Lexer, out *getUsersCountResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson650569b1EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers1(out *jwriter.Writer, in getUsersCountResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Count))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v getUsersCountResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson650569b1EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v getUsersCountResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson650569b1EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *getUsersCountResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson650569b1DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *getUsersCountResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson650569b1DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers1(l, v)
}
func easyjson650569b1DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers2(in *jlexer.Lexer, out *SignInParameters) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson650569b1EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers2(out *jwriter.Writer, in SignInParameters) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SignInParameters) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson650569b1EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SignInParameters) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson650569b1EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SignInParameters) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson650569b1DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SignInParameters) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson650569b1DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers2(l, v)
}
func easyjson650569b1DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers3(in *jlexer.Lexer, out *ErrorResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson650569b1EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers3(out *jwriter.Writer, in ErrorResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErrorResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson650569b1EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson650569b1EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson650569b1DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson650569b1DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers3(l, v)
}
func easyjson650569b1DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers4(in *jlexer.Lexer, out *CreateUserParameters) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "email":
			out.Email = string(in.String())
		case "password":
			out.Password = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson650569b1EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers4(out *jwriter.Writer, in CreateUserParameters) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"email\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"password\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Password))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v CreateUserParameters) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson650569b1EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v CreateUserParameters) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson650569b1EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *CreateUserParameters) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson650569b1DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *CreateUserParameters) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson650569b1DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgControllers4(l, v)
}
