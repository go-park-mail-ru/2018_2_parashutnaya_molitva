// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package chat

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson9b8f5552DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat(in *jlexer.Lexer, out *UserMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "from":
			out.From = string(in.String())
		case "to":
			out.To = string(in.String())
		case "msg":
			out.Msg = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat(out *jwriter.Writer, in UserMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"from\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"to\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.To))
	}
	{
		const prefix string = ",\"msg\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Msg))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat1(in *jlexer.Lexer, out *RoomParameters) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "duration":
			out.Duration = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat1(out *jwriter.Writer, in RoomParameters) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"duration\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.Duration))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RoomParameters) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RoomParameters) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RoomParameters) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RoomParameters) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat1(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat2(in *jlexer.Lexer, out *Message) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MsgType":
			out.MsgType = string(in.String())
		case "Data":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.Data).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat2(out *jwriter.Writer, in Message) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"MsgType\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.MsgType))
	}
	{
		const prefix string = ",\"Data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.Data).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Message) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Message) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Message) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Message) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat2(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat3(in *jlexer.Lexer, out *InitMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "roomid":
			out.RoomId = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat3(out *jwriter.Writer, in InitMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"roomid\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.RoomId))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InitMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InitMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InitMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InitMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat3(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat4(in *jlexer.Lexer, out *InfoMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "info":
			out.Info = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat4(out *jwriter.Writer, in InfoMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Info))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v InfoMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v InfoMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *InfoMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *InfoMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat4(l, v)
}
func easyjson9b8f5552DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat5(in *jlexer.Lexer, out *ErrorMessage) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error":
			out.Error = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson9b8f5552EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat5(out *jwriter.Writer, in ErrorMessage) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Error))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErrorMessage) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson9b8f5552EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorMessage) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson9b8f5552EncodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorMessage) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson9b8f5552DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorMessage) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson9b8f5552DecodeGithubComGoParkMailRu20182ParashutnayaMolitvaInternalPkgChat5(l, v)
}
